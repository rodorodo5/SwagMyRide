// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using SwagMyRide.Data.DataContext;
using System;


namespace SwagMyRideApi.Api.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20180502102228_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SwagMyRideApi.Api.Models.City", b =>
                {
                    b.Property<long>("CitiyId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(90);

                    b.HasKey("CitiyId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("SwagMyRideApi.Api.Models.Country", b =>
                {
                    b.Property<long>("CountryId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(90);

                    b.HasKey("CountryId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("SwagMyRideApi.Api.Models.State", b =>
                {
                    b.Property<long>("StateId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<long>("Country");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(90);

                    b.HasKey("StateId");

                    b.HasIndex("Country");

                    b.ToTable("State");
                });

            modelBuilder.Entity("SwagMyRideApi.Api.Models.VehicleComponents.BodyWorkCatalogue", b =>
                {
                    b.Property<long>("BodyWorkId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<long>("Brand");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<long>("Manufactured");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasMaxLength(90);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(90);

                    b.Property<double>("Price");

                    b.Property<int>("Stock");

                    b.Property<double>("Weight");

                    b.HasKey("BodyWorkId");

                    b.HasIndex("Brand");

                    b.HasIndex("Manufactured");

                    b.ToTable("BodyWorkCatalogue");
                });

            modelBuilder.Entity("SwagMyRideApi.Api.Models.VehicleComponents.BrandCatalogue", b =>
                {
                    b.Property<long>("BrandId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasMaxLength(90);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(90);

                    b.HasKey("BrandId");

                    b.ToTable("BrandCatalogue");
                });

            modelBuilder.Entity("SwagMyRideApi.Api.Models.VehicleComponents.BreakCatalogue", b =>
                {
                    b.Property<long>("BreakId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<long>("Brand");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<long>("Manufactured");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(90);

                    b.Property<double>("Pressure");

                    b.Property<double>("Price");

                    b.Property<int>("Stock");

                    b.Property<double>("Weight");

                    b.HasKey("BreakId");

                    b.HasIndex("Brand");

                    b.HasIndex("Manufactured");

                    b.ToTable("BreakCatalogue");
                });

            modelBuilder.Entity("SwagMyRideApi.Api.Models.VehicleComponents.CombustibleType", b =>
                {
                    b.Property<long>("CombustibleId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(90);

                    b.HasKey("CombustibleId");

                    b.ToTable("CombustibleType");
                });

            modelBuilder.Entity("SwagMyRideApi.Api.Models.VehicleComponents.ElectricSystemCatalogue", b =>
                {
                    b.Property<long>("ElecticSystemId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<long>("Brand");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<long>("Manufactured");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(90);

                    b.Property<double>("Price");

                    b.Property<int>("Stock");

                    b.Property<double>("Volts");

                    b.HasKey("ElecticSystemId");

                    b.HasIndex("Brand");

                    b.HasIndex("Manufactured");

                    b.ToTable("ElectricSystemCatalogue");
                });

            modelBuilder.Entity("SwagMyRideApi.Api.Models.VehicleComponents.MotorCatalogue", b =>
                {
                    b.Property<long>("MotorId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<long>("Brand");

                    b.Property<long>("CombustibleId");

                    b.Property<short>("Cylinders");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<short>("HorsePower");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<long>("Manufactured");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(90);

                    b.Property<double>("Price");

                    b.Property<int>("Stock");

                    b.Property<double>("Weight");

                    b.HasKey("MotorId");

                    b.HasIndex("Brand");

                    b.HasIndex("CombustibleId");

                    b.HasIndex("Manufactured");

                    b.ToTable("MotorCatalogue");
                });

            modelBuilder.Entity("SwagMyRideApi.Api.Models.VehicleComponents.SuspensionCatalogue", b =>
                {
                    b.Property<long>("SuspensionId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<long>("Brand");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<long>("Manufactured");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(90);

                    b.Property<double>("Price");

                    b.Property<int>("Stock");

                    b.Property<double>("Weight");

                    b.HasKey("SuspensionId");

                    b.HasIndex("Brand");

                    b.HasIndex("Manufactured");

                    b.ToTable("SuspensionCatalogue");
                });

            modelBuilder.Entity("SwagMyRideApi.Api.Models.VehicleComponents.TiresCatalogue", b =>
                {
                    b.Property<long>("TiresId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<long>("Brand");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<long>("Manufactured");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(90);

                    b.Property<double>("Price");

                    b.Property<short>("Size");

                    b.Property<int>("Stock");

                    b.Property<double>("Weight");

                    b.HasKey("TiresId");

                    b.HasIndex("Brand");

                    b.HasIndex("Manufactured");

                    b.ToTable("TiresCatalogue");
                });

            modelBuilder.Entity("SwagMyRideApi.Api.Models.VehicleComponents.WheelCatalogue", b =>
                {
                    b.Property<long>("WheelId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<long>("Brand");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<long>("Manufactured");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(90);

                    b.Property<double>("Price");

                    b.Property<short>("Size");

                    b.Property<int>("Stock");

                    b.Property<double>("Weight");

                    b.HasKey("WheelId");

                    b.HasIndex("Brand");

                    b.HasIndex("Manufactured");

                    b.ToTable("WheelCatalogue");
                });

            modelBuilder.Entity("SwagMyRideApi.Api.Models.State", b =>
                {
                    b.HasOne("SwagMyRideApi.Api.Models.Country", "CountryId")
                        .WithMany()
                        .HasForeignKey("Country")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SwagMyRideApi.Api.Models.VehicleComponents.BodyWorkCatalogue", b =>
                {
                    b.HasOne("SwagMyRideApi.Api.Models.VehicleComponents.BrandCatalogue", "BrandId")
                        .WithMany()
                        .HasForeignKey("Brand")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwagMyRideApi.Api.Models.Country", "CountryId")
                        .WithMany()
                        .HasForeignKey("Manufactured")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SwagMyRideApi.Api.Models.VehicleComponents.BreakCatalogue", b =>
                {
                    b.HasOne("SwagMyRideApi.Api.Models.VehicleComponents.BrandCatalogue", "BrandId")
                        .WithMany()
                        .HasForeignKey("Brand")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwagMyRideApi.Api.Models.Country", "CountryId")
                        .WithMany()
                        .HasForeignKey("Manufactured")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SwagMyRideApi.Api.Models.VehicleComponents.ElectricSystemCatalogue", b =>
                {
                    b.HasOne("SwagMyRideApi.Api.Models.VehicleComponents.BrandCatalogue", "BrandId")
                        .WithMany()
                        .HasForeignKey("Brand")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwagMyRideApi.Api.Models.Country", "CountryId")
                        .WithMany()
                        .HasForeignKey("Manufactured")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SwagMyRideApi.Api.Models.VehicleComponents.MotorCatalogue", b =>
                {
                    b.HasOne("SwagMyRideApi.Api.Models.VehicleComponents.BrandCatalogue", "BrandId")
                        .WithMany()
                        .HasForeignKey("Brand")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwagMyRideApi.Api.Models.VehicleComponents.CombustibleType", "CombustibleTypeId")
                        .WithMany()
                        .HasForeignKey("CombustibleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwagMyRideApi.Api.Models.Country", "CountryId")
                        .WithMany()
                        .HasForeignKey("Manufactured")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SwagMyRideApi.Api.Models.VehicleComponents.SuspensionCatalogue", b =>
                {
                    b.HasOne("SwagMyRideApi.Api.Models.VehicleComponents.BrandCatalogue", "BrandId")
                        .WithMany()
                        .HasForeignKey("Brand")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwagMyRideApi.Api.Models.Country", "CountryId")
                        .WithMany()
                        .HasForeignKey("Manufactured")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SwagMyRideApi.Api.Models.VehicleComponents.TiresCatalogue", b =>
                {
                    b.HasOne("SwagMyRideApi.Api.Models.VehicleComponents.BrandCatalogue", "BrandId")
                        .WithMany()
                        .HasForeignKey("Brand")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwagMyRideApi.Api.Models.Country", "CountryId")
                        .WithMany()
                        .HasForeignKey("Manufactured")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SwagMyRideApi.Api.Models.VehicleComponents.WheelCatalogue", b =>
                {
                    b.HasOne("SwagMyRideApi.Api.Models.VehicleComponents.BrandCatalogue", "BrandId")
                        .WithMany()
                        .HasForeignKey("Brand")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwagMyRideApi.Api.Models.Country", "CountryId")
                        .WithMany()
                        .HasForeignKey("Manufactured")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
