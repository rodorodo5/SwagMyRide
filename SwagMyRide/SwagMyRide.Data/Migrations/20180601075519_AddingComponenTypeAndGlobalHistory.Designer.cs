// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using SwagMyRide.Data.DataContext;
using System;

namespace SwagMyRide.Data.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20180601075519_AddingComponenTypeAndGlobalHistory")]
    partial class AddingComponenTypeAndGlobalHistory
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SwagMyRide.Data.Models.GlobalData.City", b =>
                {
                    b.Property<long>("CitiyId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(90);

                    b.HasKey("CitiyId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("SwagMyRide.Data.Models.GlobalData.ComponentType", b =>
                {
                    b.Property<long>("ComponentTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ComponentTypeId");

                    b.ToTable("ComponentType");
                });

            modelBuilder.Entity("SwagMyRide.Data.Models.GlobalData.Country", b =>
                {
                    b.Property<long>("CountryId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(90);

                    b.HasKey("CountryId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("SwagMyRide.Data.Models.GlobalData.State", b =>
                {
                    b.Property<long>("StateId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<long>("Country");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(90);

                    b.HasKey("StateId");

                    b.HasIndex("Country");

                    b.ToTable("State");
                });

            modelBuilder.Entity("SwagMyRide.Data.Models.Payment.CreditCard", b =>
                {
                    b.Property<long>("CreditCardId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreditCardNumber")
                        .IsRequired();

                    b.Property<string>("Cvv")
                        .IsRequired();

                    b.Property<string>("ExpirationDate")
                        .IsRequired();

                    b.Property<string>("LastNumbers")
                        .IsRequired();

                    b.Property<long>("UserProfileId");

                    b.HasKey("CreditCardId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("CreditCard");
                });

            modelBuilder.Entity("SwagMyRide.Data.Models.StoreComponents.GlobalHistory", b =>
                {
                    b.Property<long>("GlobalHisoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("LastBuyDateTime");

                    b.Property<long>("OrderListId");

                    b.Property<long>("UserProfileId");

                    b.HasKey("GlobalHisoryId");

                    b.HasIndex("OrderListId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("GlobalHistory");
                });

            modelBuilder.Entity("SwagMyRide.Data.Models.StoreComponents.MethodProvider", b =>
                {
                    b.Property<long>("MethodProviderId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DeliveryDay");

                    b.Property<string>("Image")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<double>("ServiceCost");

                    b.HasKey("MethodProviderId");

                    b.ToTable("MethodProvider");
                });

            modelBuilder.Entity("SwagMyRide.Data.Models.StoreComponents.ProvidersComponents", b =>
                {
                    b.Property<long>("ProvidersId")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("Brand");

                    b.Property<short>("GuaranteedDays");

                    b.Property<string>("Image")
                        .IsRequired();

                    b.Property<long>("MethodProviderId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<double>("ServiceCost");

                    b.HasKey("ProvidersId");

                    b.HasIndex("Brand");

                    b.HasIndex("MethodProviderId");

                    b.ToTable("ProvidersComponents");
                });

            modelBuilder.Entity("SwagMyRide.Data.Models.UserData.BillingAddress", b =>
                {
                    b.Property<long>("BillingAddressId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddressLine1")
                        .IsRequired();

                    b.Property<string>("AddressLine2");

                    b.Property<int>("CityId");

                    b.Property<int>("CountryId");

                    b.Property<int>("StateId");

                    b.Property<long>("UserProfileId");

                    b.Property<int>("ZipCode");

                    b.HasKey("BillingAddressId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("BillingAddress");
                });

            modelBuilder.Entity("SwagMyRide.Data.Models.UserData.OrderList", b =>
                {
                    b.Property<long>("OrderListId")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("ComponentId");

                    b.Property<long>("ComponentType");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Image")
                        .IsRequired();

                    b.Property<DateTime>("LastOrderDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<double>("Price");

                    b.Property<long>("UserProfileId");

                    b.Property<long>("UserVehicleBaseId");

                    b.HasKey("OrderListId");

                    b.HasIndex("UserProfileId");

                    b.HasIndex("UserVehicleBaseId");

                    b.ToTable("OrderList");
                });

            modelBuilder.Entity("SwagMyRide.Data.Models.UserData.UserProfile", b =>
                {
                    b.Property<long>("UserProfileId")
                        .ValueGeneratedOnAdd();

                    b.Property<short>("Age");

                    b.Property<DateTime>("Brithday");

                    b.Property<long>("Country");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(2147483647);

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<DateTime>("RegisterDate");

                    b.Property<string>("UserLastName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("UserProfileId");

                    b.HasIndex("Country");

                    b.ToTable("UserProfile");
                });

            modelBuilder.Entity("SwagMyRide.Data.Models.VehicleComponents.BoatBladesCatalogue", b =>
                {
                    b.Property<long>("BoatBladesId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<long>("Brand");

                    b.Property<long>("CombustibleId");

                    b.Property<long>("ComponentTypeId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<short>("HorsePower");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<long>("Manufactured");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(90);

                    b.Property<double>("Price");

                    b.Property<int>("Stock");

                    b.Property<short>("VechileTypeId");

                    b.Property<long>("VehicleModelId");

                    b.Property<double>("Weight");

                    b.HasKey("BoatBladesId");

                    b.HasIndex("Brand");

                    b.HasIndex("CombustibleId");

                    b.HasIndex("ComponentTypeId");

                    b.HasIndex("Manufactured");

                    b.HasIndex("VechileTypeId");

                    b.HasIndex("VehicleModelId");

                    b.ToTable("BoatBladesCatalogue");
                });

            modelBuilder.Entity("SwagMyRide.Data.Models.VehicleComponents.BodyWorkCatalogue", b =>
                {
                    b.Property<long>("BodyWorkId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<long>("Brand");

                    b.Property<long>("ComponentTypeId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<long>("Manufactured");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasMaxLength(90);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(90);

                    b.Property<double>("Price");

                    b.Property<int>("Stock");

                    b.Property<short>("VechileTypeId");

                    b.Property<long>("VehicleModelId");

                    b.Property<double>("Weight");

                    b.HasKey("BodyWorkId");

                    b.HasIndex("Brand");

                    b.HasIndex("ComponentTypeId");

                    b.HasIndex("Manufactured");

                    b.HasIndex("VechileTypeId");

                    b.HasIndex("VehicleModelId");

                    b.ToTable("BodyWorkCatalogue");
                });

            modelBuilder.Entity("SwagMyRide.Data.Models.VehicleComponents.BrakeCatalogue", b =>
                {
                    b.Property<long>("BrakeId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<long>("Brand");

                    b.Property<long>("ComponentTypeId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<long>("Manufactured");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(90);

                    b.Property<double>("Pressure");

                    b.Property<double>("Price");

                    b.Property<int>("Stock");

                    b.Property<short>("VechileTypeId");

                    b.Property<long>("VehicleModelId");

                    b.Property<double>("Weight");

                    b.HasKey("BrakeId");

                    b.HasIndex("Brand");

                    b.HasIndex("ComponentTypeId");

                    b.HasIndex("Manufactured");

                    b.HasIndex("VechileTypeId");

                    b.HasIndex("VehicleModelId");

                    b.ToTable("BreakCatalogue");
                });

            modelBuilder.Entity("SwagMyRide.Data.Models.VehicleComponents.BrandCatalogue", b =>
                {
                    b.Property<long>("BrandId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasMaxLength(90);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(90);

                    b.Property<short>("VechileTypeId");

                    b.HasKey("BrandId");

                    b.HasIndex("VechileTypeId");

                    b.ToTable("BrandCatalogue");
                });

            modelBuilder.Entity("SwagMyRide.Data.Models.VehicleComponents.CombustibleType", b =>
                {
                    b.Property<long>("CombustibleId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(90);

                    b.HasKey("CombustibleId");

                    b.ToTable("CombustibleType");
                });

            modelBuilder.Entity("SwagMyRide.Data.Models.VehicleComponents.ElectricSystemCatalogue", b =>
                {
                    b.Property<long>("ElecticSystemId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<long>("Brand");

                    b.Property<long>("ComponentTypeId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<long>("Manufactured");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(90);

                    b.Property<double>("Price");

                    b.Property<int>("Stock");

                    b.Property<short>("VechileTypeId");

                    b.Property<long>("VehicleModelId");

                    b.Property<double>("Volts");

                    b.HasKey("ElecticSystemId");

                    b.HasIndex("Brand");

                    b.HasIndex("ComponentTypeId");

                    b.HasIndex("Manufactured");

                    b.HasIndex("VechileTypeId");

                    b.HasIndex("VehicleModelId");

                    b.ToTable("ElectricSystemCatalogue");
                });

            modelBuilder.Entity("SwagMyRide.Data.Models.VehicleComponents.MotorCatalogue", b =>
                {
                    b.Property<long>("MotorId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<long>("Brand");

                    b.Property<long>("CombustibleId");

                    b.Property<long>("ComponentTypeId");

                    b.Property<short>("Cylinders");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<short>("HorsePower");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<long>("Manufactured");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(90);

                    b.Property<double>("Price");

                    b.Property<int>("Stock");

                    b.Property<short>("VechileTypeId");

                    b.Property<long>("VehicleModelId");

                    b.Property<double>("Weight");

                    b.HasKey("MotorId");

                    b.HasIndex("Brand");

                    b.HasIndex("CombustibleId");

                    b.HasIndex("ComponentTypeId");

                    b.HasIndex("Manufactured");

                    b.HasIndex("VechileTypeId");

                    b.HasIndex("VehicleModelId");

                    b.ToTable("MotorCatalogue");
                });

            modelBuilder.Entity("SwagMyRide.Data.Models.VehicleComponents.SuspensionCatalogue", b =>
                {
                    b.Property<long>("SuspensionId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<long>("Brand");

                    b.Property<long>("ComponentTypeId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<long>("Manufactured");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(90);

                    b.Property<double>("Price");

                    b.Property<int>("Stock");

                    b.Property<short>("VechileTypeId");

                    b.Property<long>("VehicleModelId");

                    b.Property<double>("Weight");

                    b.HasKey("SuspensionId");

                    b.HasIndex("Brand");

                    b.HasIndex("ComponentTypeId");

                    b.HasIndex("Manufactured");

                    b.HasIndex("VechileTypeId");

                    b.HasIndex("VehicleModelId");

                    b.ToTable("SuspensionCatalogue");
                });

            modelBuilder.Entity("SwagMyRide.Data.Models.VehicleComponents.TiresCatalogue", b =>
                {
                    b.Property<long>("TiresId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<long>("Brand");

                    b.Property<long>("ComponentTypeId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<long>("Manufactured");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(90);

                    b.Property<double>("Price");

                    b.Property<short>("Size");

                    b.Property<int>("Stock");

                    b.Property<short>("VechileTypeId");

                    b.Property<long>("VehicleModelId");

                    b.Property<double>("Weight");

                    b.HasKey("TiresId");

                    b.HasIndex("Brand");

                    b.HasIndex("ComponentTypeId");

                    b.HasIndex("Manufactured");

                    b.HasIndex("VechileTypeId");

                    b.HasIndex("VehicleModelId");

                    b.ToTable("TiresCatalogue");
                });

            modelBuilder.Entity("SwagMyRide.Data.Models.VehicleComponents.TurbinesCatalogue", b =>
                {
                    b.Property<long>("TurbinesId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<long>("Brand");

                    b.Property<long>("CombustibleId");

                    b.Property<long>("ComponentTypeId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<long>("Manufactured");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasMaxLength(90);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(90);

                    b.Property<double>("Price");

                    b.Property<int>("Stock");

                    b.Property<short>("VechileTypeId");

                    b.Property<long>("VehicleModelId");

                    b.Property<double>("Weight");

                    b.HasKey("TurbinesId");

                    b.HasIndex("Brand");

                    b.HasIndex("CombustibleId");

                    b.HasIndex("ComponentTypeId");

                    b.HasIndex("Manufactured");

                    b.HasIndex("VechileTypeId");

                    b.HasIndex("VehicleModelId");

                    b.ToTable("TurbinesCatalogue");
                });

            modelBuilder.Entity("SwagMyRide.Data.Models.VehicleComponents.WheelCatalogue", b =>
                {
                    b.Property<long>("WheelId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<long>("Brand");

                    b.Property<long>("ComponentTypeId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<long>("Manufactured");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(90);

                    b.Property<double>("Price");

                    b.Property<short>("Size");

                    b.Property<int>("Stock");

                    b.Property<short>("VechileTypeId");

                    b.Property<long>("VehicleModelId");

                    b.Property<double>("Weight");

                    b.HasKey("WheelId");

                    b.HasIndex("Brand");

                    b.HasIndex("ComponentTypeId");

                    b.HasIndex("Manufactured");

                    b.HasIndex("VechileTypeId");

                    b.HasIndex("VehicleModelId");

                    b.ToTable("WheelCatalogue");
                });

            modelBuilder.Entity("SwagMyRide.Data.Models.VehicleData.VehicleBrand", b =>
                {
                    b.Property<long>("VehicleBrandId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BrandName")
                        .HasMaxLength(100);

                    b.Property<short>("VehicleTypeId");

                    b.HasKey("VehicleBrandId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("VehicleBrands");
                });

            modelBuilder.Entity("SwagMyRide.Data.Models.VehicleData.VehicleModel", b =>
                {
                    b.Property<long>("VehicleModelId")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("VehicleBrandlId");

                    b.Property<string>("VehicleNameModel")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<short>("VehicleTypeId");

                    b.Property<short>("VehicleYearModel")
                        .HasMaxLength(4);

                    b.HasKey("VehicleModelId");

                    b.HasIndex("VehicleBrandlId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("VehicleModels");
                });

            modelBuilder.Entity("SwagMyRide.Data.Models.VehicleData.VehicleType", b =>
                {
                    b.Property<short>("VehicleTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("VehicleTypeName")
                        .IsRequired()
                        .HasMaxLength(90);

                    b.HasKey("VehicleTypeId");

                    b.ToTable("VehicleType");
                });

            modelBuilder.Entity("SwagMyRide.Data.Models.Vehicles.VehicleBase", b =>
                {
                    b.Property<long>("VehicleBaseId")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("BodyWorkId");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<long>("CombustibleId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<long>("ElecticSystemId");

                    b.Property<DateTime>("LastModifyTime");

                    b.Property<long>("UserProfileId");

                    b.Property<string>("VechileBrandName")
                        .IsRequired();

                    b.Property<short>("VechileTypeId");

                    b.Property<long>("VehicleBrandId");

                    b.Property<long>("VehicleModelId");

                    b.Property<string>("VehicleModelName")
                        .IsRequired();

                    b.Property<long>("VehicleYear");

                    b.HasKey("VehicleBaseId");

                    b.ToTable("VehicleBase");

                    b.HasDiscriminator<string>("Discriminator").HasValue("VehicleBase");
                });

            modelBuilder.Entity("SwagMyRide.Data.Models.Vehicles.VehicleAir", b =>
                {
                    b.HasBaseType("SwagMyRide.Data.Models.Vehicles.VehicleBase");

                    b.Property<long>("SuspensionId");

                    b.Property<short>("TurbinesCount");

                    b.Property<long>("TurbinesId");

                    b.Property<long>("WheelId");

                    b.ToTable("VehicleAir");

                    b.HasDiscriminator().HasValue("VehicleAir");
                });

            modelBuilder.Entity("SwagMyRide.Data.Models.Vehicles.VehicleLand", b =>
                {
                    b.HasBaseType("SwagMyRide.Data.Models.Vehicles.VehicleBase");

                    b.Property<long>("BrakeId");

                    b.Property<long>("MotorId");

                    b.Property<long>("SuspensionId")
                        .HasColumnName("VehicleLand_SuspensionId");

                    b.Property<long>("TiresId");

                    b.Property<long>("WheelId")
                        .HasColumnName("VehicleLand_WheelId");

                    b.ToTable("VehicleLand");

                    b.HasDiscriminator().HasValue("VehicleLand");
                });

            modelBuilder.Entity("SwagMyRide.Data.Models.Vehicles.VehicleWater", b =>
                {
                    b.HasBaseType("SwagMyRide.Data.Models.Vehicles.VehicleBase");

                    b.Property<long>("BoatBladesCount");

                    b.Property<long>("BoatBladesId");

                    b.Property<long>("MotorId")
                        .HasColumnName("VehicleWater_MotorId");

                    b.ToTable("VehicleWater");

                    b.HasDiscriminator().HasValue("VehicleWater");
                });

            modelBuilder.Entity("SwagMyRide.Data.Models.GlobalData.State", b =>
                {
                    b.HasOne("SwagMyRide.Data.Models.GlobalData.Country", "CountryId")
                        .WithMany()
                        .HasForeignKey("Country")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SwagMyRide.Data.Models.Payment.CreditCard", b =>
                {
                    b.HasOne("SwagMyRide.Data.Models.UserData.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SwagMyRide.Data.Models.StoreComponents.GlobalHistory", b =>
                {
                    b.HasOne("SwagMyRide.Data.Models.UserData.OrderList", "OrderList")
                        .WithMany()
                        .HasForeignKey("OrderListId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwagMyRide.Data.Models.UserData.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SwagMyRide.Data.Models.StoreComponents.ProvidersComponents", b =>
                {
                    b.HasOne("SwagMyRide.Data.Models.VehicleComponents.BrandCatalogue", "BrandId")
                        .WithMany()
                        .HasForeignKey("Brand")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwagMyRide.Data.Models.StoreComponents.MethodProvider", "MethodProvider")
                        .WithMany()
                        .HasForeignKey("MethodProviderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SwagMyRide.Data.Models.UserData.BillingAddress", b =>
                {
                    b.HasOne("SwagMyRide.Data.Models.UserData.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SwagMyRide.Data.Models.UserData.OrderList", b =>
                {
                    b.HasOne("SwagMyRide.Data.Models.UserData.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwagMyRide.Data.Models.Vehicles.VehicleBase", "VehicleBase")
                        .WithMany()
                        .HasForeignKey("UserVehicleBaseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SwagMyRide.Data.Models.UserData.UserProfile", b =>
                {
                    b.HasOne("SwagMyRide.Data.Models.GlobalData.Country", "CountryId")
                        .WithMany()
                        .HasForeignKey("Country")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SwagMyRide.Data.Models.VehicleComponents.BoatBladesCatalogue", b =>
                {
                    b.HasOne("SwagMyRide.Data.Models.VehicleComponents.BrandCatalogue", "BrandId")
                        .WithMany()
                        .HasForeignKey("Brand")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwagMyRide.Data.Models.VehicleComponents.CombustibleType", "CombustibleTypeId")
                        .WithMany()
                        .HasForeignKey("CombustibleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwagMyRide.Data.Models.GlobalData.ComponentType", "ComponenetType")
                        .WithMany()
                        .HasForeignKey("ComponentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwagMyRide.Data.Models.GlobalData.Country", "CountryId")
                        .WithMany()
                        .HasForeignKey("Manufactured")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwagMyRide.Data.Models.VehicleData.VehicleType", "VehicleType")
                        .WithMany()
                        .HasForeignKey("VechileTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwagMyRide.Data.Models.VehicleData.VehicleModel", "VehicleModel")
                        .WithMany()
                        .HasForeignKey("VehicleModelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SwagMyRide.Data.Models.VehicleComponents.BodyWorkCatalogue", b =>
                {
                    b.HasOne("SwagMyRide.Data.Models.VehicleComponents.BrandCatalogue", "BrandId")
                        .WithMany()
                        .HasForeignKey("Brand")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwagMyRide.Data.Models.GlobalData.ComponentType", "ComponenetType")
                        .WithMany()
                        .HasForeignKey("ComponentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwagMyRide.Data.Models.GlobalData.Country", "CountryId")
                        .WithMany()
                        .HasForeignKey("Manufactured")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwagMyRide.Data.Models.VehicleData.VehicleType", "VehicleType")
                        .WithMany()
                        .HasForeignKey("VechileTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwagMyRide.Data.Models.VehicleData.VehicleModel", "VehicleModel")
                        .WithMany()
                        .HasForeignKey("VehicleModelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SwagMyRide.Data.Models.VehicleComponents.BrakeCatalogue", b =>
                {
                    b.HasOne("SwagMyRide.Data.Models.VehicleComponents.BrandCatalogue", "BrandId")
                        .WithMany()
                        .HasForeignKey("Brand")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwagMyRide.Data.Models.GlobalData.ComponentType", "ComponenetType")
                        .WithMany()
                        .HasForeignKey("ComponentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwagMyRide.Data.Models.GlobalData.Country", "CountryId")
                        .WithMany()
                        .HasForeignKey("Manufactured")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwagMyRide.Data.Models.VehicleData.VehicleType", "VehicleType")
                        .WithMany()
                        .HasForeignKey("VechileTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwagMyRide.Data.Models.VehicleData.VehicleModel", "VehicleModel")
                        .WithMany()
                        .HasForeignKey("VehicleModelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SwagMyRide.Data.Models.VehicleComponents.BrandCatalogue", b =>
                {
                    b.HasOne("SwagMyRide.Data.Models.VehicleData.VehicleType", "VehicleType")
                        .WithMany()
                        .HasForeignKey("VechileTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SwagMyRide.Data.Models.VehicleComponents.ElectricSystemCatalogue", b =>
                {
                    b.HasOne("SwagMyRide.Data.Models.VehicleComponents.BrandCatalogue", "BrandId")
                        .WithMany()
                        .HasForeignKey("Brand")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwagMyRide.Data.Models.GlobalData.ComponentType", "ComponenetType")
                        .WithMany()
                        .HasForeignKey("ComponentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwagMyRide.Data.Models.GlobalData.Country", "CountryId")
                        .WithMany()
                        .HasForeignKey("Manufactured")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwagMyRide.Data.Models.VehicleData.VehicleType", "VehicleType")
                        .WithMany()
                        .HasForeignKey("VechileTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwagMyRide.Data.Models.VehicleData.VehicleModel", "VehicleModel")
                        .WithMany()
                        .HasForeignKey("VehicleModelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SwagMyRide.Data.Models.VehicleComponents.MotorCatalogue", b =>
                {
                    b.HasOne("SwagMyRide.Data.Models.VehicleComponents.BrandCatalogue", "BrandId")
                        .WithMany()
                        .HasForeignKey("Brand")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwagMyRide.Data.Models.VehicleComponents.CombustibleType", "CombustibleTypeId")
                        .WithMany()
                        .HasForeignKey("CombustibleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwagMyRide.Data.Models.GlobalData.ComponentType", "ComponenetType")
                        .WithMany()
                        .HasForeignKey("ComponentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwagMyRide.Data.Models.GlobalData.Country", "CountryId")
                        .WithMany()
                        .HasForeignKey("Manufactured")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwagMyRide.Data.Models.VehicleData.VehicleType", "VehicleType")
                        .WithMany()
                        .HasForeignKey("VechileTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwagMyRide.Data.Models.VehicleData.VehicleModel", "VehicleModel")
                        .WithMany()
                        .HasForeignKey("VehicleModelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SwagMyRide.Data.Models.VehicleComponents.SuspensionCatalogue", b =>
                {
                    b.HasOne("SwagMyRide.Data.Models.VehicleComponents.BrandCatalogue", "BrandId")
                        .WithMany()
                        .HasForeignKey("Brand")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwagMyRide.Data.Models.GlobalData.ComponentType", "ComponenetType")
                        .WithMany()
                        .HasForeignKey("ComponentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwagMyRide.Data.Models.GlobalData.Country", "CountryId")
                        .WithMany()
                        .HasForeignKey("Manufactured")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwagMyRide.Data.Models.VehicleData.VehicleType", "VehicleType")
                        .WithMany()
                        .HasForeignKey("VechileTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwagMyRide.Data.Models.VehicleData.VehicleModel", "VehicleModel")
                        .WithMany()
                        .HasForeignKey("VehicleModelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SwagMyRide.Data.Models.VehicleComponents.TiresCatalogue", b =>
                {
                    b.HasOne("SwagMyRide.Data.Models.VehicleComponents.BrandCatalogue", "BrandId")
                        .WithMany()
                        .HasForeignKey("Brand")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwagMyRide.Data.Models.GlobalData.ComponentType", "ComponenetType")
                        .WithMany()
                        .HasForeignKey("ComponentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwagMyRide.Data.Models.GlobalData.Country", "CountryId")
                        .WithMany()
                        .HasForeignKey("Manufactured")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwagMyRide.Data.Models.VehicleData.VehicleType", "VehicleType")
                        .WithMany()
                        .HasForeignKey("VechileTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwagMyRide.Data.Models.VehicleData.VehicleModel", "VehicleModel")
                        .WithMany()
                        .HasForeignKey("VehicleModelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SwagMyRide.Data.Models.VehicleComponents.TurbinesCatalogue", b =>
                {
                    b.HasOne("SwagMyRide.Data.Models.VehicleComponents.BrandCatalogue", "BrandId")
                        .WithMany()
                        .HasForeignKey("Brand")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwagMyRide.Data.Models.VehicleComponents.CombustibleType", "CombustibleTypeId")
                        .WithMany()
                        .HasForeignKey("CombustibleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwagMyRide.Data.Models.GlobalData.ComponentType", "ComponenetType")
                        .WithMany()
                        .HasForeignKey("ComponentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwagMyRide.Data.Models.GlobalData.Country", "CountryId")
                        .WithMany()
                        .HasForeignKey("Manufactured")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwagMyRide.Data.Models.VehicleData.VehicleType", "VehicleType")
                        .WithMany()
                        .HasForeignKey("VechileTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwagMyRide.Data.Models.VehicleData.VehicleModel", "VehicleModel")
                        .WithMany()
                        .HasForeignKey("VehicleModelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SwagMyRide.Data.Models.VehicleComponents.WheelCatalogue", b =>
                {
                    b.HasOne("SwagMyRide.Data.Models.VehicleComponents.BrandCatalogue", "BrandId")
                        .WithMany()
                        .HasForeignKey("Brand")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwagMyRide.Data.Models.GlobalData.ComponentType", "ComponenetType")
                        .WithMany()
                        .HasForeignKey("ComponentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwagMyRide.Data.Models.GlobalData.Country", "CountryId")
                        .WithMany()
                        .HasForeignKey("Manufactured")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwagMyRide.Data.Models.VehicleData.VehicleType", "VehicleType")
                        .WithMany()
                        .HasForeignKey("VechileTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwagMyRide.Data.Models.VehicleData.VehicleModel", "VehicleModel")
                        .WithMany()
                        .HasForeignKey("VehicleModelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SwagMyRide.Data.Models.VehicleData.VehicleBrand", b =>
                {
                    b.HasOne("SwagMyRide.Data.Models.VehicleData.VehicleType", "VehicleType")
                        .WithMany()
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SwagMyRide.Data.Models.VehicleData.VehicleModel", b =>
                {
                    b.HasOne("SwagMyRide.Data.Models.VehicleData.VehicleBrand", "BrandVehicle")
                        .WithMany()
                        .HasForeignKey("VehicleBrandlId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwagMyRide.Data.Models.VehicleData.VehicleType", "VehicleType")
                        .WithMany()
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
